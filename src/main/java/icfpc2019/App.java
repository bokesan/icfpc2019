/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package icfpc2019;

import icfpc2019.pathfinder.Pathfinder;
import icfpc2019.pathfinder.StarNode;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

public class App {

    public static void main(String[] args) throws IOException {
        if (args.length == 0) {
            System.err.println("usage: solver problem-file");
            System.exit(1);
        }

        String desc = readFile(args[0], StandardCharsets.UTF_8);
        ProblemDesc problem = ProblemDesc.of(desc);

        System.out.println("Problem description successfully read!");

        Grid grid = Grid.of(problem);

        System.out.println("Grid created!");

        //System.out.println(grid.toString());

        Pathfinder finder = new Pathfinder();
        finder.initNodes(grid);

        Robot initRobot = new Robot(problem.getInitialWorkerLocation());

        State state = new State(grid, initRobot, problem.getBoosters(), finder);

        while (!state.mapFinished()) {
            int numRobots = state.getNumRobots();
            for (int i = 0; i < numRobots; i++) {
                Robot r = state.getRobot(i);
                Point next = state.getNextPointToVisit(r);
                List<StarNode> starPath = finder.findPath(state.getCurrentPosition(r), next, 0);
                state.move(r, starPath);
            }
        }

        System.out.println("Wrapping finished!");
        System.out.println("Solution length: " + combineResults(state).length());

        if (args.length > 1) {
            writeFile(args[1], combineResults(state));
            System.out.println("Solution written to: " + args[1]);
        }
    }

    private static String combineResults(State state) {
        StringBuilder builder = new StringBuilder();
        builder.append(state.getResult(state.getRobot(0)));
        for (int i = 1; i < state.getNumRobots(); i++) {
            builder.append("#");
            builder.append(state.getResult(state.getRobot(i)));
        }
        return builder.toString();
    }

    private static void writeFile(String path, String content) throws IOException {
        BufferedWriter writer = new BufferedWriter(new FileWriter(path));
        writer.write(content);
        writer.close();
    }

    private static List<Point> pathFromStarNodes(List<StarNode> starPath) {
        List<Point> path = new ArrayList<>();
        for (StarNode star : starPath) {
            path.add(Point.of(star.getXPosition(), star.getYPosition()));
        }
        return path;
    }

    private static String readFile(String path, Charset encoding) throws IOException {
        byte[] encoded = Files.readAllBytes(Paths.get(path));
        return new String(encoded, encoding);
    }

    public String getGreeting() {
        return "Hi!";
    }
}
